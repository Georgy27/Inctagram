// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  username          String             @unique
  email             String             @unique
  hash              String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  passwordRecovery  PasswordRecovery?
  emailConfirmation EmailConfirmation?
  deviceSession     DeviceSession[]
  avatar            Avatar?
  profile           Profile?
  post              Post[]
  account           Account?
  oauthAccount      OauthAccount[]
  accountId         String?
  payment           Payment[]
  subscription      Subscription[]
}

enum OauthProvider {
  GITHUB
  GOOGLE
}

enum AccountType {
  PERSONAL
  BUSINESS
}

model Account {
  id          String      @id @default(uuid())
  accountType AccountType @default(PERSONAL)
  user        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String      @unique
}

model OauthAccount {
  id               String        @id @default(uuid())
  clientId         String
  type             OauthProvider
  linked           Boolean       @default(false)
  mergeCode        String?
  mergeCodeExpDate DateTime?
  user             User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String

  @@unique([clientId, type])
}

model Profile {
  id        String    @id @default(uuid())
  name      String?
  surname   String?
  birthday  DateTime?
  city      String?
  aboutMe   String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Token {
  accessTokenHash  String
  refreshTokenHash String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  deviceSession    DeviceSession? @relation(fields: [deviceSessionId], references: [deviceId], onDelete: Cascade)
  deviceSessionId  String         @unique
}

model DeviceSession {
  ip             String
  deviceName     String
  createdAt      DateTime @default(now())
  lastActiveDate DateTime @updatedAt
  deviceId       String   @unique
  user           User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?
  token          Token?
}

model PasswordRecovery {
  recoveryCode   String?
  expirationDate String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String   @unique
}

model EmailConfirmation {
  confirmationCode String
  expirationDate   String
  isConfirmed      Boolean
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail        String   @unique
}

model Avatar {
  id         String   @id @default(uuid())
  url        String?
  previewUrl String?
  size       Int?
  height     Int?
  width      Int?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Post {
  id          String   @id @default(uuid())
  userId      String
  description String?  @db.VarChar(500)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  images      Image[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Image {
  id         String         @id @default(uuid())
  url        String
  previewUrl String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  postId     String
  post       Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  metadata   ImageMetadata?
}

model ImageMetadata {
  id        String   @id @default(uuid())
  size      Int
  height    Int
  width     Int
  imageId   String   @unique
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PricingTarrifs {
  id               String           @id @default(uuid())
  providerPriceId  String
  provider         PaymentProvider
  subscriptionType SubscriptionType
  priceId          String
  price            Price            @relation(references: [id], fields: [priceId], onDelete: Cascade)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  payment          Payment[]
}

model Price {
  id             String           @id @default(uuid())
  currency       Currency         @default(USD)
  value          Float
  period         Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  pricingTarrifs PricingTarrifs[]
  subscription   Subscription[]
  payment        Payment[]
}

model Payment {
  id              String           @id @default(uuid())
  user            User             @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId          String
  price           Price            @relation(fields: [priceId], references: [id])
  priceId         String
  status          PaymentStatus
  reference       PaymentReference @default(ONETIME)
  provider        PaymentProvider
  info            Json?
  pricingTarrif   PricingTarrifs   @relation(references: [id], fields: [pricingTarrifId], onDelete: Cascade)
  pricingTarrifId String
  subscription    Subscription?    @relation(references: [id], fields: [subscriptionId], onDelete: Cascade)
  subscriptionId  String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Subscription {
  id                  String             @id @default(uuid())
  endDate             DateTime?          @db.Timestamptz(3)
  nextPaymentDate     DateTime?
  startDate           DateTime           @default(now()) @db.Timestamptz(3)
  relatedSubscription String?
  status              SubscriptionStatus
  type                SubscriptionType
  user                User               @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId              String
  customerId          String?            @unique
  payments            Payment[]
  price               Price              @relation(references: [id], fields: [priceId], onDelete: Cascade)
  priceId             String
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

// model SubscriptionPayment {
//   id           String        @id @default(uuid())
//   payment      Payment       @relation(references: [id], fields: [paymentId], onDelete: Cascade)
//   paymentId    String        @unique
//   createdAt    DateTime      @default(now())
//   updatedAt    DateTime      @updatedAt
//   subscription Subscription?
// }

enum Currency {
  USD
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  REJECTED
}

enum PaymentType {
  ONETIME
  RECCURING
}

enum PaymentProvider {
  STRIPE
  PAYPAL
}

enum SubscriptionStatus {
  ACTIVE
  PENDING
  CANCELLED
}

enum SubscriptionType {
  ONETIME
  RECCURING
}

enum PaymentReference {
  RECCURING
  ONETIME
}

enum PeriodType {
  DAY
  WEEK
  MONTH
}
